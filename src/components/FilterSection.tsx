import React, { useState } from 'react';
import { Tent, Car, Home, Wifi, Bath, Utensils, MapPin, X } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Checkbox } from '@/components/ui/checkbox';
import { Card, CardContent } from '@/components/ui/card';
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";

interface FilterSectionProps {
  filters: {
    accommodationType: string[];
    amenities: string[];
    petFriendly: boolean;
  };
  onFilterChange: (category: string, value: string | boolean) => void;
}

const FilterSection = ({ filters, onFilterChange }: FilterSectionProps) => {
  const [openPopover, setOpenPopover] = useState<string | null>(null);

  const campingStyles = [
    { 
      id: 'campsite', 
      label: '‡∏•‡∏≤‡∏ô‡∏Å‡∏≤‡∏á‡πÄ‡∏ï‡πá‡∏ô‡∏ó‡πå (Camp Site)', 
      icon: Tent, 
      description: '‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏•‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ô‡∏≥‡πÄ‡∏ï‡πá‡∏ô‡∏ó‡πå‡∏°‡∏≤‡πÄ‡∏≠‡∏á',
      image: '‚õ∫'
    },
    { 
      id: 'rv', 
      label: '‡∏à‡∏∏‡∏î‡∏à‡∏≠‡∏î‡∏£‡∏ñ‡∏ö‡πâ‡∏≤‡∏ô / ‡∏Ñ‡∏≤‡∏£‡∏≤‡∏ß‡∏≤‡∏ô (RV / Campervan site)', 
      icon: Car, 
      description: '‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏î‡∏£‡∏ñ‡∏ö‡πâ‡∏≤‡∏ô ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏ü/‡∏ô‡πâ‡∏≥',
      image: 'üöê'
    },
    { 
      id: 'hotel', 
      label: '‡∏ö‡πâ‡∏≤‡∏ô‡∏û‡∏±‡∏Å / Hotel', 
      icon: Home, 
      description: '‡∏ó‡∏µ‡πà‡∏û‡∏±‡∏Å‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏¥‡πà‡∏á‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏î‡∏ß‡∏Å',
      image: 'üè®'
    }
  ];

  const getAmenitiesOptions = () => {
    const selectedTypes = filters.accommodationType;
    
    // If campsite is selected
    if (selectedTypes.includes('campsite')) {
      return [
        { id: 'toilet', label: '‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥' },
        { id: 'shower', label: '‡∏´‡πâ‡∏≠‡∏á‡∏≠‡∏≤‡∏ö‡∏ô‡πâ‡∏≥' },
        { id: 'electricity', label: '‡πÑ‡∏ü‡∏ü‡πâ‡∏≤' },
        { id: 'campfire', label: '‡∏à‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏Å‡∏≠‡∏á‡πÑ‡∏ü' },
        { id: 'wifi-mobile', label: '‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠ / Wi-Fi' },
        { id: 'tent-equipment', label: '‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏ï‡πâ‡∏ô‡∏ó‡πå' },
        { id: 'bedding', label: '‡∏´‡∏°‡∏≠‡∏ô / ‡∏ú‡πâ‡∏≤‡∏´‡πà‡∏°' },
        { id: 'portable-ac', label: '‡πÅ‡∏≠‡∏£‡πå‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà' },
        { id: 'cafe-shop', label: '‡∏Ñ‡∏≤‡πÄ‡∏ü‡πà/‡∏£‡πâ‡∏≤‡∏ô‡∏Ç‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á' },
        { id: 'breakfast', label: '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏ä‡πâ‡∏≤' },
        { id: 'parking', label: '‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏î‡∏£‡∏ñ' },
        { id: 'pets-allowed', label: '‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏î‡πâ' }
      ];
    }
    
    // If RV is selected
    if (selectedTypes.includes('rv')) {
      return [
        // Power System
        { id: 'power-hookups', label: 'üîå ‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏ü‡∏ü‡πâ‡∏≤ (Power Hookups)', category: 'power' },
        { id: 'electric-hookup', label: '‡∏°‡∏µ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡πÉ‡∏´‡πâ (Electric Hookup)' },
        { id: '15-amp', label: '‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏ü‡πâ‡∏≤ 15 amp' },
        { id: '30-amp', label: '‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏ü‡πâ‡∏≤ 30 amp' },
        { id: '50-amp', label: '‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏ü‡πâ‡∏≤ 50 amp' },
        
        // Water System
        { id: 'water-system', label: 'üö∞ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡πâ‡∏≥', category: 'water' },
        { id: 'water-hookup', label: '‡∏°‡∏µ‡∏ô‡πâ‡∏≥‡∏õ‡∏£‡∏∞‡∏õ‡∏≤‡πÉ‡∏´‡πâ‡∏ï‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤ RV' },
        { id: 'water-tank', label: '‡∏°‡∏µ‡∏ñ‡∏±‡∏á‡∏ô‡πâ‡∏≥‡∏£‡∏ß‡∏°‡πÉ‡∏´‡πâ‡πÄ‡∏ï‡∏¥‡∏°' },
        
        // Sewer System
        { id: 'sewer-system', label: 'üí© ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡πà‡∏≠‡∏ô‡πâ‡∏≥‡∏ó‡∏¥‡πâ‡∏á', category: 'sewer' },
        { id: 'sewer-hookup', label: '‡∏°‡∏µ‡∏ó‡πà‡∏≠‡∏ô‡πâ‡∏≥‡∏ó‡∏¥‡πâ‡∏á‡∏ï‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤ RV ‡πÑ‡∏î‡πâ (Sewer Hookup)' },
        { id: 'dump-station', label: '‡∏°‡∏µ‡∏à‡∏∏‡∏î‡∏ó‡∏¥‡πâ‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢ (Dump Station)' },
        
        // Parking
        { id: 'parking-area', label: 'üÖøÔ∏è ‡∏•‡∏≤‡∏ô‡∏à‡∏≠‡∏î', category: 'parking' },
        { id: 'pull-through', label: '‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏î‡πÅ‡∏ö‡∏ö Pull-through (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á)' },
        { id: 'back-in', label: '‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏î‡πÅ‡∏ö‡∏ö Back-in (‡∏ï‡πâ‡∏≠‡∏á‡∏ñ‡∏≠‡∏¢‡πÄ‡∏Ç‡πâ‡∏≤‡∏à‡∏≠‡∏î)' },
        { id: 'slide-out', label: '‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Slide-out' },
        { id: 'big-rig', label: '‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏£‡∏ñ‡∏¢‡∏≤‡∏ß‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 10 ‡πÄ‡∏°‡∏ï‡∏£' },
        { id: 'level-site', label: '‡∏•‡∏≤‡∏ô‡∏à‡∏≠‡∏î‡∏û‡∏∑‡πâ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö (Concrete / Gravel / Dirt)' },
        
        // Additional Facilities
        { id: 'additional-facilities', label: 'üöø ‡∏™‡∏¥‡πà‡∏á‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏î‡∏ß‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°', category: 'facilities' },
        { id: 'shared-restroom', label: '‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥‡∏£‡∏ß‡∏°' },
        { id: 'shared-shower', label: '‡∏´‡πâ‡∏≠‡∏á‡∏≠‡∏≤‡∏ö‡∏ô‡πâ‡∏≥' },
        { id: 'dish-washing', label: '‡∏à‡∏∏‡∏î‡∏•‡πâ‡∏≤‡∏á‡∏à‡∏≤‡∏ô' },
        { id: 'trash-nearby', label: '‡∏ñ‡∏±‡∏á‡∏Ç‡∏¢‡∏∞‡πÉ‡∏Å‡∏•‡πâ‡∏à‡∏∏‡∏î‡∏à‡∏≠‡∏î' },
        { id: 'security-camera', label: '‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ß‡∏á‡∏à‡∏£‡∏õ‡∏¥‡∏î / ‡πÑ‡∏ü‡∏™‡πà‡∏≠‡∏á‡∏™‡∏ß‡πà‡∏≤‡∏á' },
        { id: 'wifi-available', label: '‡∏°‡∏µ Wi-Fi' },
        { id: 'cell-signal', label: '‡∏°‡∏µ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠' },
        
        // Others
        { id: 'rv-others', label: 'üêæ ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ', category: 'others' },
        { id: 'pets-allowed-rv', label: '‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏î‡πâ' },
        { id: 'near-services', label: '‡πÉ‡∏Å‡∏•‡πâ‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ / ‡∏à‡∏∏‡∏î‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£' },
        { id: 'fire-picnic', label: '‡∏°‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡πà‡∏≠‡πÑ‡∏ü / ‡∏õ‡∏¥‡∏Å‡∏ô‡∏¥‡∏Å' }
      ];
    }
    
    // If hotel is selected
    if (selectedTypes.includes('hotel')) {
      return [
        // Room Features
        { id: 'room-features', label: 'üõè ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å', category: 'room' },
        { id: 'bed-options', label: '‡πÄ‡∏ï‡∏µ‡∏¢‡∏á‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß / ‡πÄ‡∏ï‡∏µ‡∏¢‡∏á‡∏Ñ‡∏π‡πà' },
        { id: 'bedding-complete', label: '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ô‡∏≠‡∏ô‡∏Ñ‡∏£‡∏ö' },
        { id: 'air-conditioning', label: '‡πÅ‡∏≠‡∏£‡πå / ‡∏û‡∏±‡∏î‡∏•‡∏°' },
        { id: 'television', label: '‡∏ó‡∏µ‡∏ß‡∏µ' },
        { id: 'refrigerator', label: '‡∏ï‡∏π‡πâ‡πÄ‡∏¢‡πá‡∏ô' },
        { id: 'kettle-coffee', label: '‡∏Å‡∏≤‡∏ô‡πâ‡∏≥‡∏£‡πâ‡∏≠‡∏ô / ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ä‡∏á‡∏Å‡∏≤‡πÅ‡∏ü' },
        { id: 'microwave-oven', label: '‡πÑ‡∏°‡πÇ‡∏Ñ‡∏£‡πÄ‡∏ß‡∏ü' },
        { id: 'work-desk', label: '‡πÇ‡∏ï‡πä‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô' },
        { id: 'wardrobe', label: '‡∏ï‡∏π‡πâ‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤' },
        { id: 'balcony-view', label: '‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏á / ‡∏ß‡∏¥‡∏ß‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥' },
        
        // Bathroom
        { id: 'bathroom-features', label: 'üöø ‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥', category: 'bathroom' },
        { id: 'private-bathroom', label: '‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥‡πÉ‡∏ô‡∏ï‡∏±‡∏ß' },
        { id: 'water-heater', label: '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏≥‡∏ô‡πâ‡∏≥‡∏≠‡∏∏‡πà‡∏ô' },
        { id: 'bathtub', label: '‡∏≠‡πà‡∏≤‡∏á‡∏≠‡∏≤‡∏ö‡∏ô‡πâ‡∏≥' },
        { id: 'towels', label: '‡∏ú‡πâ‡∏≤‡πÄ‡∏ä‡πá‡∏î‡∏ï‡∏±‡∏ß' },
        { id: 'toiletries', label: '‡∏™‡∏ö‡∏π‡πà / ‡πÅ‡∏ä‡∏°‡∏û‡∏π / ‡∏Ç‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥' },
        { id: 'hotel-wifi', label: 'Wi-Fi' },
        { id: 'power-outlets', label: '‡∏õ‡∏•‡∏±‡πä‡∏Å‡πÑ‡∏ü' },
        { id: 'usb-ports', label: '‡∏û‡∏≠‡∏£‡πå‡∏ï USB' },
        
        // External Services
        { id: 'external-services', label: 'üÖøÔ∏è ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡πà‡∏á‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏î‡∏ß‡∏Å‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å', category: 'external' },
        { id: 'free-parking', label: '‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏î‡∏£‡∏ñ‡∏ü‡∏£‡∏µ' },
        { id: 'elevator', label: '‡∏•‡∏¥‡∏ü‡∏ï‡πå' },
        { id: 'common-area', label: '‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏•‡∏≤‡∏á (‡πÄ‡∏ä‡πà‡∏ô ‡πÇ‡∏ñ‡∏á‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô, ‡∏•‡πá‡∏≠‡∏ö‡∏ö‡∏µ‡πâ)' },
        { id: 'security-system', label: '‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ß‡∏á‡∏à‡∏£‡∏õ‡∏¥‡∏î / ‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢' },
        
        // Food and Services
        { id: 'food-services', label: '‚òï ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£', category: 'food' },
        { id: 'hotel-breakfast', label: '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏ä‡πâ‡∏≤' },
        { id: 'restaurant', label: '‡∏°‡∏µ‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏±‡∏Å' },
        { id: 'room-service', label: '‡∏£‡∏π‡∏°‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ß‡∏¥‡∏™' },
        { id: 'free-water', label: '‡∏ô‡πâ‡∏≥‡∏î‡∏∑‡πà‡∏°‡∏ü‡∏£‡∏µ' },
        { id: 'minibar', label: '‡∏°‡∏¥‡∏ô‡∏¥‡∏ö‡∏≤‡∏£‡πå' },
        
        // Others
        { id: 'hotel-others', label: 'üß≥ ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ', category: 'hotel-others' },
        { id: '24h-reception', label: '‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö 24 ‡∏ä‡∏°.' },
        { id: 'luggage-storage', label: '‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏ù‡∏≤‡∏Å‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤' },
        { id: 'housekeeping', label: '‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏°‡πà‡∏ö‡πâ‡∏≤‡∏ô' },
        { id: 'pets-allowed-hotel', label: '‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏ô‡∏≥‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏î‡πâ' },
        { id: 'disability-access', label: '‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏û‡∏¥‡∏Å‡∏≤‡∏£ (‡∏ó‡∏≤‡∏á‡∏•‡∏≤‡∏î / ‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥ / ‡∏•‡∏¥‡∏ü‡∏ï‡πå)' }
      ];
    }
    
    // Default amenities if no specific type is selected
    return [
      { id: 'toilet', label: 'Toilet' },
      { id: 'shower', label: 'Shower' },
      { id: 'wifi', label: 'Wifi' },
      { id: 'campfires', label: 'Campfires allowed' },
      { id: 'potable-water', label: 'Potable water' },
      { id: 'picnic-table', label: 'Picnic table' },
      { id: 'cooking-equipment', label: 'Cooking equipment' },
      { id: 'trash-bin', label: 'Trash bin' }
    ];
  };

  const handleCampingStyleSelect = (styleId: string) => {
    onFilterChange('accommodationType', styleId);
    setOpenPopover(null);
  };

  const handleAmenityChange = (amenityId: string) => {
    onFilterChange('amenities', amenityId);
  };

  const getSelectedCount = (category: string) => {
    if (category === 'camping-style') {
      return filters.accommodationType.length;
    }
    if (category === 'amenities') {
      return filters.amenities.length;
    }
    return 0;
  };

  const amenitiesOptions = getAmenitiesOptions();
  const categorizedAmenities = amenitiesOptions.reduce((acc, amenity) => {
    const category = amenity.category || 'default';
    if (!acc[category]) {
      acc[category] = [];
    }
    acc[category].push(amenity);
    return acc;
  }, {} as Record<string, typeof amenitiesOptions>);

  return (
    <div className="bg-white border-b border-gray-200 py-4">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex flex-wrap gap-3">
          {/* Camping Style Filter */}
          <Popover 
            open={openPopover === 'camping-style'} 
            onOpenChange={(open) => setOpenPopover(open ? 'camping-style' : null)}
          >
            <PopoverTrigger asChild>
              <Button 
                variant="outline" 
                className="h-10 px-4 text-sm font-medium border-gray-300 hover:border-gray-400"
              >
                Camping style
                {getSelectedCount('camping-style') > 0 && (
                  <span className="ml-2 bg-gray-900 text-white text-xs px-2 py-0.5 rounded-full">
                    {getSelectedCount('camping-style')}
                  </span>
                )}
              </Button>
            </PopoverTrigger>
            <PopoverContent className="w-96 p-0" align="start">
              <div className="p-4">
                <div className="flex items-center justify-between mb-4">
                  <h3 className="text-lg font-semibold">Camping style</h3>
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => setOpenPopover(null)}
                  >
                    <X className="h-4 w-4" />
                  </Button>
                </div>
                <div className="space-y-3">
                  {campingStyles.map((style) => {
                    const isSelected = filters.accommodationType.includes(style.id);
                    return (
                      <Card
                        key={style.id}
                        className={`cursor-pointer transition-all hover:shadow-md ${
                          isSelected ? 'ring-2 ring-green-600 bg-green-50' : 'hover:border-gray-300'
                        }`}
                        onClick={() => handleCampingStyleSelect(style.id)}
                      >
                        <CardContent className="p-4">
                          <div className="flex items-center space-x-3">
                            <div className="text-2xl">{style.image}</div>
                            <div className="flex-1">
                              <h4 className="font-medium text-gray-900">{style.label}</h4>
                              <p className="text-sm text-gray-600">{style.description}</p>
                            </div>
                            {isSelected && (
                              <div className="w-5 h-5 bg-green-600 rounded-full flex items-center justify-center">
                                <div className="w-2 h-2 bg-white rounded-full"></div>
                              </div>
                            )}
                          </div>
                        </CardContent>
                      </Card>
                    );
                  })}
                </div>
                <div className="mt-4 flex justify-between">
                  <Button 
                    variant="ghost" 
                    size="sm"
                    onClick={() => {
                      // Clear camping style filters
                      filters.accommodationType.forEach(type => {
                        onFilterChange('accommodationType', type);
                      });
                    }}
                  >
                    Clear all
                  </Button>
                  <Button 
                    className="bg-gray-900 hover:bg-gray-800"
                    onClick={() => setOpenPopover(null)}
                  >
                    Show results
                  </Button>
                </div>
              </div>
            </PopoverContent>
          </Popover>

          {/* Amenities Filter */}
          <Popover 
            open={openPopover === 'amenities'} 
            onOpenChange={(open) => setOpenPopover(open ? 'amenities' : null)}
          >
            <PopoverTrigger asChild>
              <Button 
                variant="outline"
                className="h-10 px-4 text-sm font-medium border-gray-300 hover:border-gray-400"
              >
                Amenities
                {getSelectedCount('amenities') > 0 && (
                  <span className="ml-2 bg-gray-900 text-white text-xs px-2 py-0.5 rounded-full">
                    {getSelectedCount('amenities')}
                  </span>
                )}
              </Button>
            </PopoverTrigger>
            <PopoverContent className="w-96 p-0 max-h-96 overflow-y-auto" align="start">
              <div className="p-4">
                <div className="flex items-center justify-between mb-4">
                  <h3 className="text-lg font-semibold">‡∏™‡∏¥‡πà‡∏á‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏î‡∏ß‡∏Å</h3>
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => setOpenPopover(null)}
                  >
                    <X className="h-4 w-4" />
                  </Button>
                </div>
                
                {Object.entries(categorizedAmenities).map(([category, amenities]) => (
                  <div key={category} className="mb-4">
                    {amenities.map((amenity) => (
                      <div key={amenity.id} className="mb-3">
                        {amenity.category ? (
                          <h4 className="text-sm font-medium text-gray-700 mb-2">{amenity.label}</h4>
                        ) : (
                          <div className="flex items-center space-x-2">
                            <Checkbox
                              id={amenity.id}
                              checked={filters.amenities.includes(amenity.id)}
                              onCheckedChange={() => handleAmenityChange(amenity.id)}
                            />
                            <label
                              htmlFor={amenity.id}
                              className="text-sm text-gray-700 cursor-pointer"
                            >
                              {amenity.label}
                            </label>
                          </div>
                        )}
                      </div>
                    ))}
                  </div>
                ))}

                <div className="flex justify-between mt-4">
                  <Button 
                    variant="ghost" 
                    size="sm"
                    onClick={() => {
                      // Clear amenities filters
                      filters.amenities.forEach(amenity => {
                        onFilterChange('amenities', amenity);
                      });
                    }}
                  >
                    Clear all
                  </Button>
                  <Button 
                    className="bg-gray-900 hover:bg-gray-800"
                    onClick={() => setOpenPopover(null)}
                  >
                    Show results
                  </Button>
                </div>
              </div>
            </PopoverContent>
          </Popover>

          {/* Other Filters */}
          <Button 
            variant="outline"
            className="h-10 px-4 text-sm font-medium border-gray-300 hover:border-gray-400"
          >
            Pets allowed
          </Button>

          <Button 
            variant="outline"
            className="h-10 px-4 text-sm font-medium border-gray-300 hover:border-gray-400"
          >
            Instant book
          </Button>
        </div>
      </div>
    </div>
  );
};

export default FilterSection;
